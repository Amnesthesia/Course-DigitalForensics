\subsection{TOR - Onion Router}
The Onion Router - \textit{TOR} - is a widely used network of computers acting as relays allowing anyone to anonymize network traffic by encapsulating each packet in multiple layers of encryption, and disguising its origin as the packet traverses the TOR network before reaching its destination.\\

TOR is widely known for its well developed encryption and is widely used by people who want increased privacy and protection against surveillance, whether for legal or illegal activity. Because of TOR's strong encryption, it's not viable (nor as of yet possible) to decrypt the traffic on-the-fly, but there are other ways of countering TOR as an anti-forensics tool.\\

This does pose some issues, though, which we'll discuss later on - but first, let's take a look at how it works as to better understand what we can and cannot do with traffic originating from the TOR network.\\

\subsubsection{Onion Routing fundamentals}
Let's assume two people - Alice and Bobster - want to communicate with eachother via email. Alice doesn't want three-letter agencies to read her email, because she's sending secret pictures to Bobster and is, unlike many of her friends, aware of the flaws with SnapChat.\\

Alice creates an email and sends it off to Bob using SMTP through TOR; the first thing that happens is that a path is selected through the TOR network, ending at an exit node. Each packet is encrypted several times, so let's assume this packet will travel through a path of 6 non-exit relays before reaching its destination: The packets are encrypted first with the last nodes "public key", meaning that only the last node can access the unencrypted information. \\

\includegraphics{tor.png}

This newly created packet is again encrypted with the destination IP of the relay prior to the last one. This continues until the packet has been encrypted in several "layers", with the last layer being decryptable only by the first relay in the path it will traverse. When the packet is received by the first relay, it "peels off", or decrypts, the first layer of encryption - accessing only a new encrypted packet with a new destination IP to send it off to. \\

Each relay in this path knows only the node it came from and the next node it will go to, but is completely unaware of the final destination or the original source. 

\subsubsection{The problem with trust}
As mentioned above, at the final step -- the exit node -- the entire packet has been decrypted and all content is accessible at this final step of the path, before it reaches the regular internet.\\

This is the problem with trust in the TOR network, as the relatively few exit nodes \textbf{must} be trusted to not tamper with your data, and anyone can set up an exit node. This is how exit node sniffing can retrieve Alice's email to Bob, and other information that is deliberately being hidden. Not everything that glimmers is gold, though, and not everyone using TOR is necessarily hiding something you're looking for; targeting someone specifically can be very hard since although content is accessible, the source is not.\\

By analyzing the content for usernames, cookies or sessions, SMTP and HTTP headers, and so on, it can be possible to uncover some information about a specific target, but an issue that may arise here is that although Alice's email may have been picked up, further emails in the same conversation may \textbf{not} be picked up, as you can't know what path in the network a packet will travel and if it will end up using your malicious exit node as the final step in its path.\\

\includegraphics{spoiled_onion.png}

This is where internet bandits and three-letter government agencies have identified and applied a different approach: Reverse connections without TOR. Because the packet is unencrypted at the final step, it's possible to modify the contents. There are multiple ways content could be modified to leak the real IP of the source, such as using known XSS vulnerabilities to trigger a JavaScript xmlHttpRequest which may bypass TOR (this may be hard if a browser with NoScript is used, as is default in the TOR browser bundle), or modifying executable files transmitted over the network, as has been seen in the wild recently.\\